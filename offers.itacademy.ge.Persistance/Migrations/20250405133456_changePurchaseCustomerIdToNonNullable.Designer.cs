// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using offers.itacademy.ge.Persistance.Context;

#nullable disable

namespace offers.itacademy.ge.Persistance.Migrations
{
    [DbContext(typeof(DiscountPlatformContext))]
    [Migration("20250405133456_changePurchaseCustomerIdToNonNullable")]
    partial class changePurchaseCustomerIdToNonNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryCustomer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedCategoriesId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "SelectedCategoriesId");

                    b.HasIndex("SelectedCategoriesId");

                    b.ToTable("CustomerCategories", (string)null);
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.ProductOffers.ProductOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExpirationTime");

                    b.ToTable("ProductOffers");
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Purchases.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductOfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductOfferId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Users.Admin", b =>
                {
                    b.HasBaseType("offers.itacademy.ge.Domain.Users.User");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Users.Company", b =>
                {
                    b.HasBaseType("offers.itacademy.ge.Domain.Users.User");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("Balance");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActivated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Users.Customer", b =>
                {
                    b.HasBaseType("offers.itacademy.ge.Domain.Users.User");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("Balance");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("CategoryCustomer", b =>
                {
                    b.HasOne("offers.itacademy.ge.Domain.Users.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offers.itacademy.ge.Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("SelectedCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.ProductOffers.ProductOffer", b =>
                {
                    b.HasOne("offers.itacademy.ge.Domain.Categories.Category", "Category")
                        .WithMany("ProductOffers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offers.itacademy.ge.Domain.Users.Company", "Company")
                        .WithMany("ProductOffers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Purchases.Purchase", b =>
                {
                    b.HasOne("offers.itacademy.ge.Domain.Users.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("offers.itacademy.ge.Domain.ProductOffers.ProductOffer", "ProductOffer")
                        .WithMany("Purchases")
                        .HasForeignKey("ProductOfferId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("ProductOffer");
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Categories.Category", b =>
                {
                    b.Navigation("ProductOffers");
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.ProductOffers.ProductOffer", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Users.Company", b =>
                {
                    b.Navigation("ProductOffers");
                });

            modelBuilder.Entity("offers.itacademy.ge.Domain.Users.Customer", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
